{"version":3,"sources":["API/ChatRoomsAPI.jsx","Chat/Chat.jsx","API/axiosClient.jsx"],"names":["ChatRoomsAPI","getMessageByRoomId","roomId","url","concat","axiosClient","get","createNewRoom","post","addMessage","body","put","getAllRoom","socket","require","io","Chat","props","allRoom","setAllRoom","useState","setRoomId","localStorage","getItem","message","setMessage","textMessage","setTextMessage","newMessage","setNewMessage","roomHasNewMessage","setRoomHasNewMessage","fetchRooms","async","result","rooms","useEffect","fetchData","console","log","content","on","data","removeItem","newRooms","length","_id","setItem","_jsxs","className","children","_jsx","type","placeholder","style","height","map","value","onClick","handleRoomChange","background","src","alt","width","fontSize","color","index","is_admin","name","id","removeNewMessage","onChange","e","target","trim","emit","error","axios","create","baseURL","headers","paramsSerializer","params","queryString","stringify","interceptors","request","use","token","config","Authorization","FormData","response"],"mappings":"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","file":"static/js/7.b7313006.chunk.js","sourcesContent":["import axiosClient from './axiosClient';\n\nconst ChatRoomsAPI = {\n\tgetMessageByRoomId: (roomId) => {\n\t\tconst url = `/chatrooms/getById?roomId=${roomId}`;\n\t\treturn axiosClient.get(url);\n\t},\n\n\tcreateNewRoom: () => {\n\t\tconst url = `/chatrooms/createNewRoom`;\n\t\treturn axiosClient.post(url);\n\t},\n\n\taddMessage: (body) => {\n\t\tconst url = `/chatrooms/addMessage`;\n\t\treturn axiosClient.put(url, body);\n\t},\n\n\tgetAllRoom: () => {\n\t\tconst url = `/chatrooms/getAllRoom`;\n\t\treturn axiosClient.get(url);\n\t}\n};\n\nexport default ChatRoomsAPI;\n","import React, { useEffect, useState } from \"react\";\nimport ChatRoomsAPI from \"../API/ChatRoomsAPI\";\n\nimport \"./Chat.css\";\n\nconst io = require(\"socket.io-client\");\nconst socket = io(\"http://localhost:5000\");\n\nfunction Chat(props) {\n  const [allRoom, setAllRoom] = useState([]);\n  const [roomId, setRoomId] = useState(\n    localStorage.getItem(\"current-room\") || \"\"\n  );\n  const [message, setMessage] = useState([]);\n  const [textMessage, setTextMessage] = useState(\"\");\n  const [newMessage, setNewMessage] = useState(false); // thiết lập nhận thông báo mới\n  const [roomHasNewMessage, setRoomHasNewMessage] = useState(); // thiết lập phòng có tin nhắn mới\n\n  const onChangeText = (e) => {\n    setTextMessage(e.target.value);\n  };\n  //hàm biến mất thông báo tin nhắn mới khi admin click vào input\n  const removeNewMessage = () => {\n    setNewMessage(false);\n  };\n  // Hàm này dùng để tải danh sách phòng chat hiện có\n  const fetchRooms = async () => {\n    const result = await ChatRoomsAPI.getAllRoom();\n    setAllRoom(result.rooms); // Update allRoom state with fetched rooms\n    return result.rooms;\n  };\n  useEffect(() => {\n    fetchRooms();\n  }, []);\n\n  // Hàm này dùng để load dữ liệu message và nó sẽ chạy lại khi state id_user2 thay đổi\n  // Tức là khi admin chọn người dùng mà admin muốn chat thì state id_user2 sẽ thay đổi\n  // để gọi lại hàm này\n  const fetchData = async (roomId) => {\n    const result = await ChatRoomsAPI.getMessageByRoomId(roomId);\n    console.log(\"cotent\", result.content);\n    setMessage(result.content || []);\n  };\n  useEffect(() => {\n    if (roomId) {\n      fetchData(roomId);\n    }\n  }, [roomId]);\n  // Hàm này dùng để gửi tin nhắn cho khách hàng\n  const handlerSend = async () => {\n    if (!roomId || textMessage.trim() === \"\") {\n      return;\n    }\n\n    const data = {\n      message: textMessage,\n      roomId: roomId,\n      is_admin: true,\n    };\n\n    try {\n      await ChatRoomsAPI.addMessage(data); // Save message to database\n\n      socket.emit(\"send_message\", data); // Emit message to server\n\n      setTextMessage(\"\"); // Clear input field\n    } catch (error) {\n      console.error(\"Failed to send message:\", error);\n    }\n  };\n  const handleRoomChange = (roomId) => {\n    localStorage.setItem(\"current-room\", roomId);\n    setRoomId(roomId);\n  };\n  //Nhận dữ liệu từ server gửi lên thông qua socket với key receive_message\n\n  // Listen for incoming messages\n  useEffect(() => {\n    socket.on(\"receive_message\", (data) => {\n      console.log(\"Received message:\", data);\n      fetchData(data.roomId);\n    });\n  }, []);\n\n  useEffect(() => {\n    socket.on(\"delete-room\", async (data) => {\n      console.log(\"delete-room\", data);\n      localStorage.removeItem(\"current-room\");\n      const newRooms = await fetchRooms();\n      console.log(newRooms);\n      if (newRooms.length > 0) {\n        const roomId = newRooms[0]._id;\n        console.log(roomId);\n        localStorage.setItem(\"current-room\", roomId);\n        setRoomId(roomId);\n      }\n    });\n  }, []);\n\n  useEffect(() => {\n    // Listen for new rooms created\n    socket.on(\"new_room_created\", (data) => {\n      console.log(\"New room created:\", data);\n      fetchRooms();\n    });\n  }, [socket]);\n  useEffect(() => {\n    // Listen for new message created\n    socket.on(\"new-message\", (data) => {\n      setNewMessage(true);\n      setRoomHasNewMessage(data.roomId);\n    });\n  }, []);\n\n  return (\n    <div className=\"page-wrapper\">\n      <div className=\"page-breadcrumb\">\n        <div className=\"row\">\n          <div className=\"col-7 align-self-center\">\n            <h4 className=\"page-title text-truncate text-dark font-weight-medium mb-1\">\n              Chat\n            </h4>\n            <div className=\"d-flex align-items-center\">\n              <nav aria-label=\"breadcrumb\">\n                <ol className=\"breadcrumb m-0 p-0\">\n                  <li\n                    className=\"breadcrumb-item text-muted active\"\n                    aria-current=\"page\"\n                  >\n                    Apps\n                  </li>\n                  <li\n                    className=\"breadcrumb-item text-muted\"\n                    aria-current=\"page\"\n                  >\n                    Chat\n                  </li>\n                </ol>\n              </nav>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          <div className=\"col-md-12\">\n            <div className=\"card\">\n              <div className=\"row no-gutters\">\n                <div className=\"col-lg-3 col-xl-2 border-right\">\n                  <div className=\"card-body border-bottom\">\n                    <form>\n                      <input\n                        className=\"form-control\"\n                        type=\"text\"\n                        placeholder=\"Search Contact\"\n                      />\n                    </form>\n                  </div>\n                  <div\n                    className=\"scrollable position-relative\"\n                    style={{ height: \"calc(80vh - 111px)\" }}\n                  >\n                    <ul className=\"mailbox list-style-none\">\n                      <li>\n                        <div className=\"message-center\">\n                          {allRoom &&\n                            allRoom.map((value) => (\n                              <a\n                                key={value._id}\n                                onClick={() => handleRoomChange(value._id)}\n                                style={{\n                                  background: `${\n                                    roomId === value._id\n                                      ? \"rgb(186, 186, 238)\"\n                                      : \"transparent\"\n                                  }`,\n                                }}\n                                className=\"message-item d-flex align-items-center border-bottom px-3 py-2 active_user\"\n                              >\n                                <div className=\"user-img\">\n                                  {\" \"}\n                                  <img\n                                    src=\"https://img.icons8.com/color/36/000000/administrator-male.png\"\n                                    alt=\"user\"\n                                    className=\"img-fluid rounded-circle\"\n                                    width=\"40px\"\n                                  />{\" \"}\n                                  <span className=\"profile-status away float-right\"></span>\n                                </div>\n                                <div className=\"w-75 d-inline-block v-middle pl-2\">\n                                  <h6 className=\"message-title mb-0 mt-1\">\n                                    {value._id}\n                                  </h6>\n                                  {newMessage &&\n                                    roomHasNewMessage === value._id && (\n                                      <p\n                                        style={{\n                                          fontSize: \"7px\",\n                                          color: \"gray\",\n                                        }}\n                                      >\n                                        New Message\n                                      </p>\n                                    )}\n                                </div>\n                              </a>\n                            ))}\n                        </div>\n                      </li>\n                    </ul>\n                  </div>\n                </div>\n                <div className=\"col-lg-9  col-xl-10\">\n                  <div\n                    className=\"chat-box scrollable position-relative\"\n                    style={{ height: \"calc(80vh - 111px)\" }}\n                  >\n                    <ul className=\"chat-list list-style-none px-3 pt-3\">\n                      {message &&\n                        message.map((value, index) =>\n                          value.is_admin ? (\n                            <li\n                              className=\"chat-item odd list-style-none mt-3\"\n                              key={index}\n                            >\n                              <div className=\"chat-content text-right d-inline-block pl-3\">\n                                <div className=\"box msg p-2 d-inline-block mb-1\">\n                                  You: {value.message}\n                                </div>\n                                <br />\n                              </div>\n                            </li>\n                          ) : (\n                            <li\n                              className=\"chat-item list-style-none mt-3\"\n                              key={index}\n                            >\n                              <div className=\"chat-img d-inline-block\">\n                                <img\n                                  src=\"https://img.icons8.com/color/36/000000/administrator-male.png\"\n                                  alt=\"user\"\n                                  className=\"rounded-circle\"\n                                  width=\"45\"\n                                />\n                              </div>\n                              <div className=\"chat-content d-inline-block pl-3\">\n                                <h6 className=\"font-weight-medium\">\n                                  {value.name}\n                                </h6>\n                                <div className=\"msg p-2 d-inline-block mb-1\">\n                                  Client: {value.message}\n                                </div>\n                              </div>\n                              <div className=\"chat-time d-block font-10 mt-1 mr-0 mb-3\"></div>\n                            </li>\n                          )\n                        )}\n                    </ul>\n                  </div>\n                  <div className=\"card-body border-top\">\n                    <div className=\"row\">\n                      <div className=\"col-9\">\n                        <div className=\"input-field mt-0 mb-0\">\n                          <input\n                            id=\"textarea1\"\n                            placeholder=\"Type and enter\"\n                            className=\"form-control border-0\"\n                            type=\"text\"\n                            onClick={removeNewMessage}\n                            onChange={onChangeText}\n                            value={textMessage}\n                          />\n                        </div>\n                      </div>\n                      <div className=\"col-3\">\n                        <a\n                          className=\"btn-circle btn-lg btn-cyan float-right text-white\"\n                          onClick={handlerSend}\n                        >\n                          <i className=\"fas fa-paper-plane\"></i>\n                        </a>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <footer className=\"footer text-center\"></footer>\n    </div>\n  );\n}\n\nexport default Chat;\n","// api/axiosClient.js\nimport axios from \"axios\";\nimport queryString from \"query-string\";\n// Set up default config for http requests here\n// Please have a look at here `https://github.com/axios/axios#requestconfig` for the full list of configs\nconst axiosClient = axios.create({\n  baseURL: \"http://localhost:5000/admin\",\n  headers: {\n    \"content-type\": \"application/json\",\n  },\n  paramsSerializer: (params) => queryString.stringify(params),\n});\naxiosClient.interceptors.request.use(async (config) => {\n  // Handle token here ...\n  const token = localStorage.getItem(\"token\");\n\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  // Check if the request is for multipart/form-data\n  if (config.data instanceof FormData) {\n    delete config.headers[\"content-type\"]; // Remove content-type header for FormData\n  }\n\n  return config;\n});\naxiosClient.interceptors.response.use(\n  (response) => {\n    if (response && response.data) {\n      return response.data;\n    }\n    return response;\n  },\n  (error) => {\n    // Handle errors\n    throw error;\n  }\n);\nexport default axiosClient;\n"],"sourceRoot":""}