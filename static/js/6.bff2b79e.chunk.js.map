{"version":3,"sources":["Login/Login.jsx","API/axiosClient.jsx","API/UserAPI.jsx"],"names":["Login","email","setEmail","useState","password","setPassword","errorEmail","setErrorEmail","errorPassword","setErrorPassword","errorLogin","setErrorLogin","redirect","setRedirect","loading","error","dispatch","useContext","AuthContext","_jsx","className","children","_jsxs","type","placeholder","value","onChange","e","target","Redirect","to","onClick","handleSubmit","async","params","console","log","query","queryString","stringify","response","UserAPI","postLogin","err","path","msg","message","user","localStorage","setItem","_id","fullname","token","payload","fetchLogin","axiosClient","axios","create","baseURL","headers","paramsSerializer","interceptors","request","use","getItem","config","Authorization","concat","data","FormData","getAllData","get","getDetailData","id","url","post","postSignUp"],"mappings":"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","file":"static/js/6.bff2b79e.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport UserAPI from \"../API/UserAPI\";\nimport { AuthContext } from \"../Context/AuthContext\";\n\nimport queryString from \"query-string\";\nimport \"./Login.css\";\n\nconst Login = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [errorEmail, setErrorEmail] = useState(false);\n  const [errorPassword, setErrorPassword] = useState(false);\n  const [errorLogin, setErrorLogin] = useState(null);\n  const [redirect, setRedirect] = useState(false);\n  const { loading, error, dispatch } = useContext(AuthContext);\n\n  const handleSubmit = () => {\n    const fetchLogin = async () => {\n      const params = {\n        email: email,\n        password: password,\n      };\n      console.log(\"PARAMS\", params);\n      const query = \"?\" + queryString.stringify(params);\n      const response = await UserAPI.postLogin(query);\n      console.log(\"response\", response);\n      if (response && response.error) {\n        const err = response.error;\n        if (err.path === \"email\") {\n          setErrorEmail(true);\n          setErrorPassword(false);\n          setErrorLogin(err.msg);\n        } else if (err.path === \"password\") {\n          setErrorEmail(false);\n          setErrorPassword(true);\n          setErrorLogin(err.msg);\n        }\n      }\n      if (response && response.message === \"Success\") {\n        const user = response.user;\n\n        setErrorEmail(false);\n        setErrorPassword(false);\n        setErrorLogin(null);\n        localStorage.setItem(\"id_user\", user._id);\n\n        localStorage.setItem(\"name_user\", user.fullname);\n        localStorage.setItem(\"token\", user.token);\n        dispatch({ type: \"LOGIN_SUCCESS\", payload: user });\n        setRedirect(true);\n        return;\n      }\n    };\n    fetchLogin();\n  };\n\n  return (\n    <div className=\"page-wrapper\">\n      <div className=\"page-breadcrumb\">\n        <div className=\"row\">\n          <div className=\"login\">\n            <div className=\"heading\">\n              <h2>Sign in</h2>\n              <div>\n                {errorEmail && (\n                  <span className=\"text-danger\">{errorLogin}</span>\n                )}\n                {errorPassword && (\n                  <span className=\"text-danger\">{errorLogin}</span>\n                )}\n              </div>\n              <form>\n                <div className=\"input-group input-group-lg\">\n                  <span className=\"input-group-addon\">\n                    <i className=\"fa fa-user\"></i>\n                  </span>\n                  <input\n                    type=\"text\"\n                    className=\"form-control\"\n                    placeholder=\"Email\"\n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                  />\n                </div>\n\n                <div className=\"input-group input-group-lg\">\n                  <span className=\"input-group-addon\">\n                    <i className=\"fa fa-lock\"></i>\n                  </span>\n                  <input\n                    type=\"password\"\n                    className=\"form-control\"\n                    placeholder=\"Password\"\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                  />\n                </div>\n                {redirect && <Redirect to={`/`} />}\n                <button type=\"button\" className=\"float\" onClick={handleSubmit}>\n                  Login\n                </button>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;\n","// api/axiosClient.js\nimport axios from \"axios\";\nimport queryString from \"query-string\";\n// Set up default config for http requests here\n// Please have a look at here `https://github.com/axios/axios#requestconfig` for the full list of configs\nconst axiosClient = axios.create({\n  baseURL: \"http://localhost:5000/admin\",\n  headers: {\n    \"content-type\": \"application/json\",\n  },\n  paramsSerializer: (params) => queryString.stringify(params),\n});\naxiosClient.interceptors.request.use(async (config) => {\n  // Handle token here ...\n  const token = localStorage.getItem(\"token\");\n\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  // Check if the request is for multipart/form-data\n  if (config.data instanceof FormData) {\n    delete config.headers[\"content-type\"]; // Remove content-type header for FormData\n  }\n\n  return config;\n});\naxiosClient.interceptors.response.use(\n  (response) => {\n    if (response && response.data) {\n      return response.data;\n    }\n    return response;\n  },\n  (error) => {\n    // Handle errors\n    throw error;\n  }\n);\nexport default axiosClient;\n","import axiosClient from \"./axiosClient\";\n\nconst UserAPI = {\n  getAllData: () => {\n    const url = \"/users\";\n    return axiosClient.get(url);\n  },\n\n  getDetailData: (id) => {\n    const url = `${id}`;\n    return axiosClient.get(url);\n  },\n  postLogin: (query) => {\n    const url = `/login/${query}`;\n    return axiosClient.post(url);\n  },\n  postSignUp: (query) => {\n    const url = `/signup/${query}`;\n    return axiosClient.post(url);\n  },\n};\n\nexport default UserAPI;\n"],"sourceRoot":""}